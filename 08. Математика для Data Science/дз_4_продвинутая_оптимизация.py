# -*- coding: utf-8 -*-
"""ДЗ_4_Продвинутая оптимизация.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J1_RD_XWckzfhU2S_4Bgc3VIzfedqeQ7
"""

# strategy, popsize, recombination, tol

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from scipy.optimize import differential_evolution
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

# %matplotlib inline

def ackley(x):
    arg1 = -0.2 * np.sqrt(0.5 * (x[0] ** 2 + x[1] ** 2))
    arg2 = 0.5 * (np.cos(2. * np.pi * x[0]) + np.cos(2. * np.pi * x[1]))
    return -20. * np.exp(arg1) - np.exp(arg2) + 20. + np.e

bounds = [(-10, 10), (-10, 10)]

result = differential_evolution(ackley, bounds, seed=42,  strategy='best2bin')
result

"""**TOL**"""

nit_list = []
tol = np.arange(0, 1.1, 0.1)
for i in tol:
    result = differential_evolution(ackley, bounds, seed=42,  tol=i).nit
    nit_list.append(result)
nit_list

plt.plot(tol, nit_list, label = 'Кривая tol', color='r');
plt.xlabel('tol')
plt.ylabel('nit')
plt.legend()
plt.title('Зависимость от параметра tol')
plt.show()

"""**STRATEGY**"""

str_strategy = 'best1bin', 'best1exp', 'rand1bin', 'rand1exp', 'rand2bin', 'rand2exp', 'randtobest1bin', 'randtobest1exp', 'currenttobest1bin', 'currenttobest1exp', 'best2exp', 'best2bin'

nit_strategy = []
param_strategy = []
for i in str_strategy:
  res = differential_evolution(ackley, bounds, seed=42, strategy=i).nit
  nit_strategy.append(res)
  param_strategy.append(i)
nit_strategy

data_strategy = tuple(zip(param_strategy, nit_strategy))
data_strategy

df_strategy = pd.DataFrame(data_strategy, columns=['strategy', 'nit']).sort_values(by='nit', ascending=False)
df_strategy.head()

plt.figure(figsize=(10, 6))
ax = sns.barplot(y='strategy', x='nit', data=df_strategy, hue='nit')  # sns.atplot(kind='bar'....)
for i in ax.containers:
  ax.bar_label(i, size=8)
plt.title('Зависимость от параметра strategy', size=18)
plt.xlabel('Количество итераций', size=15)
plt.ylabel('Strategy', size=15)
plt.show()

"""**MUTATION**"""

mutation = np.arange(0.1, 1.1, 0.1)
mutation

list_mutation = []
param_mutation = []
for i in mutation:
  res = differential_evolution(ackley, bounds, seed=42, mutation=i).nit
  list_mutation.append(res)
  param_mutation.append(i)
list_mutation

plt.plot(param_mutation, list_mutation, label = 'Кривая mutation', linewidth = 1.5, color='olive')
plt.xlabel('Mutation', size=15)
plt.ylabel('Количество итераций', size=15)
plt.legend()
plt.title('Зависимость от параметра mutation', size=18)
plt.show()

"""**POPSIZE**"""

res  =  []
param  =  []
for  i  in range(1, 100, 10):
    res.append(differential_evolution(ackley,  bounds,  popsize=i,  seed=42 )['nit'])
    param.append(i)

fig, ax = plt.subplots()
ax.plot(param,  res, color = 'r', linewidth = 1)
ax.grid(which='major', color = 'k')
ax.tick_params(axis = 'both', pad = 10, labelsize = 10)

fig.set_figwidth(12)
fig.set_figheight(6)

plt.title('Зависимость количества итераций от параметра popsize', size=20)
plt.ylabel('Кол-во итераций', size = 15)
plt.xlabel('popsize', size = 20)
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
qw = ['qwe', 'wqer', 'efqef']
wq = [12, 45, 78]
data = tuple(zip(qw, wq))
df = pd.DataFrame(data, columns=['Name','int'])


plt.figure(figsize=[12, 5])
sns.barplot(data=df, x='Name', y='int', color='r')
plt.show()