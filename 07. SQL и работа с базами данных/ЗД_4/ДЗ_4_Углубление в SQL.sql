--=============== МОДУЛЬ 4. УГЛУБЛЕНИЕ В SQL =======================================
--= ПОМНИТЕ, ЧТО НЕОБХОДИМО УСТАНОВИТЬ ВЕРНОЕ СОЕДИНЕНИЕ И ВЫБРАТЬ СХЕМУ PUBLIC===========
SET search_path TO public;

--======== ОСНОВНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--База данных: если подключение к облачной базе, то создаёте новую схему с префиксом в --виде фамилии, название должно быть на латинице в нижнем регистре и таблицы создаете --в этой новой схеме, если подключение к локальному серверу, то создаёте новую схему и --в ней создаёте таблицы.

--Спроектируйте базу данных, содержащую три справочника:
--· язык (английский, французский и т. п.);
--· народность (славяне, англосаксы и т. п.);
--· страны (Россия, Германия и т. п.).
--Две таблицы со связями: язык-народность и народность-страна, отношения многие ко многим. Пример таблицы со связями — film_actor.
--Требования к таблицам-справочникам:
--· наличие ограничений первичных ключей.
--· идентификатору сущности должен присваиваться автоинкрементом;
--· наименования сущностей не должны содержать null-значения, не должны допускаться --дубликаты в названиях сущностей.
--Требования к таблицам со связями:
--· наличие ограничений первичных и внешних ключей.

--В качестве ответа на задание пришлите запросы создания таблиц и запросы по --добавлению в каждую таблицу по 5 строк с данными.
create schema ethnicity

--СОЗДАНИЕ ТАБЛИЦЫ ЯЗЫКИ
create table language (
	language_id int2 primary key generated always as identity,
	language_name varchar(100) not null unique
	)


--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ ЯЗЫКИ
insert into "language" (language_name)
values ('Русский'), ('Белорусский'), ('Словацкий'), ('Болгарский'), ('Хорватский'), ('Чеченский'), ('Осетинский'), ('Чувашский'), 
	('Испанский'), ('Итальянский'), ('Португальский'), ('Французский'), ('Румынский'), ('Каталанский'), ('Галисийский'),  	   
	('Немецкий'), ('Нидерландский'), ('Датский'), ('Шведский'), ('Английский'), ('Финский'),						               
	('Турецкий'), ('Арабский'), ('Азербайджанский'), ('Туркменский'), ('Киргизский'), ('Узбекский'),
	('Китайский'), ('Монгольский'), ('Корейский'), ('Японский'), ('Кантонский'), ('Ойратский'), ('Казахский') 


--СОЗДАНИЕ ТАБЛИЦЫ НАРОДНОСТИ
create table nationality (
	nationality_id int2 primary key generated always as identity, 
	nationality_name varchar(100) not null unique
	)


--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ НАРОДНОСТИ
insert into nationality (nationality_name)
values ('Славянские народы'), 
	('Романские народы'), 
	('Германские народы'), 
	('Тюркоязычные народы'), 
	('Восточноазиатцы')


--СОЗДАНИЕ ТАБЛИЦЫ СТРАНЫ
create table country (
	country_id int2 primary key generated always as identity,
	country_name varchar(100) not null unique
	)


--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ СТРАНЫ
insert into country (country_name)
values ('Россия'), ('Белорусь'), ('Словакия'), ('Болгария'), ('Хорватия'),
	('Испания'), ('Италия'), ('Португалия'), ('Франция'), ('Румыния'), 
	('Германия'), ('Австрия'), ('Нидерланды'), ('Дания'), ('Швеция'),
	('Турция'), ('Азербайджан'), ('Туркмения'), ('Киргизия'), 
	('Китай'), ('Монголия'), ('Северная Корея'), ('Япония')


--СОЗДАНИЕ ПЕРВОЙ ТАБЛИЦЫ СО СВЯЗЯМИ
create table language_nationality (
	language_id int references language(language_id), 
	nationality_id int references nationality(nationality_id),
	primary key (language_id, nationality_id) 
	)


--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ СО СВЯЗЯМИ
insert into language_nationality (language_id, nationality_id)
values (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), -- (6, 1), (7, 1), (8, 1) - языки не славянских народов  
(9, 2), (10, 2), (11, 2), (12, 2), (13, 2), (14, 2), (15, 2),
(16, 3), (17, 3), (18, 3), (19, 3), (20, 3), (21, 3),
(22, 4), (23, 4), (24, 4), (25, 4), (26, 4), (27, 4),
(28, 5), (29, 5), (30, 5), (31, 5), (32, 5), (33, 5), (34, 5)


--СОЗДАНИЕ ВТОРОЙ ТАБЛИЦЫ СО СВЯЗЯМИ
create table nationality_country (
	nationality_id int references nationality(nationality_id),
	country_id int references country(country_id),
	primary key (nationality_id, country_id)
	)


--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ СО СВЯЗЯМИ
insert into nationality_country (nationality_id, country_id)
values (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), 
(2, 6), (2, 7), (2, 8), (2, 9), (2, 10),
(3, 11), (3, 12), (3, 13), (3, 14), (3, 15),
(4, 16), (4, 17), (4, 18), (4, 19),
(5, 20), (5, 21), (5, 22), (5, 23)


select n.nationality_name "Народность", l.language_name "Язык" 
from nationality n 
join language_nationality ln2 on ln2.nationality_id = n.nationality_id 
join "language" l on l.language_id = ln2.language_id 

--------------------------------------------------------------------
select  n.nationality_name "Народность", c.country_name "Страна"
from country c 
join nationality_country nc on nc.country_id = c.country_id 
join nationality n on n.nationality_id = nc.nationality_id 

--======== ДОПОЛНИТЕЛЬНАЯ ЧАСТЬ ==============


--ЗАДАНИЕ №1 
--Создайте новую таблицу film_new со следующими полями:
--·   	film_name - название фильма - тип данных varchar(255) и ограничение not null
--·   	film_year - год выпуска фильма - тип данных integer, условие, что значение должно быть больше 0
--·   	film_rental_rate - стоимость аренды фильма - тип данных numeric(4,2), значение по умолчанию 0.99
--·   	film_duration - длительность фильма в минутах - тип данных integer, ограничение not null и условие, что значение должно быть больше 0
--Если работаете в облачной базе, то перед названием таблицы задайте наименование вашей схемы.



--ЗАДАНИЕ №2 
--Заполните таблицу film_new данными с помощью SQL-запроса, где колонкам соответствуют массивы данных:
--·       film_name - array['The Shawshank Redemption', 'The Green Mile', 'Back to the Future', 'Forrest Gump', 'Schindlers List']
--·       film_year - array[1994, 1999, 1985, 1994, 1993]
--·       film_rental_rate - array[2.99, 0.99, 1.99, 2.99, 3.99]
--·   	  film_duration - array[142, 189, 116, 142, 195]



--ЗАДАНИЕ №3
--Обновите стоимость аренды фильмов в таблице film_new с учетом информации, 
--что стоимость аренды всех фильмов поднялась на 1.41



--ЗАДАНИЕ №4
--Фильм с названием "Back to the Future" был снят с аренды, 
--удалите строку с этим фильмом из таблицы film_new



--ЗАДАНИЕ №5
--Добавьте в таблицу film_new запись о любом другом новом фильме



--ЗАДАНИЕ №6
--Напишите SQL-запрос, который выведет все колонки из таблицы film_new, 
--а также новую вычисляемую колонку "длительность фильма в часах", округлённую до десятых



--ЗАДАНИЕ №7 
--Удалите таблицу film_new
